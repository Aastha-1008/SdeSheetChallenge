#include<unordered_map>
#include<queue>
vector<int> dijkstra(vector<vector<int>> &vec, int vertices, int edges, int source) {
    // Write your code here.
    unordered_map<int, vector<pair<int,int>> >adj;
    for(int i = 0 ; i<edges ; i++){
        int dis = vec[i][2];
        int v = vec[i][1];
        int u = vec[i][0];
        adj[u].push_back({v,dis});
        adj[v].push_back({u,dis});
    }
    vector<int>dis(vertices,INT_MAX);
priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
    dis[source] = 0;
    pq.push(make_pair(0,source));
    while(!pq.empty()){
        int prev = pq.top().second;
        pq.pop();
        
        for(auto it : adj[prev]){
            int nextdis = it.second;
            int next = it.first;
            if(dis[next]>dis[prev]+nextdis){
                dis[next] =  dis[prev]+nextdis;
                pq.push(make_pair(dis[next], next));
            }
        }
    }
    return dis;
}
