#include<unordered_map>
#include<set>
void prepare(vector<pair<int,int>>&edges,unordered_map<int,set<int>> &adj,int n){
    
    for(int i = 0 ; i<n ; i++){
        int u = edges[i].first;
        int v = edges[i].second;
        adj[u].insert(v);
    }
}
int check(int node ,unordered_map<int,set<int>> &adj, vector<int>&vis, vector<int>&dfsvis){
    vis[node]=1;
    dfsvis[node]=1;
    for(auto i: adj[node]){
        if(vis[i]==0){
            if(check(i,adj,vis,dfsvis))return 1;
        }
        else if(dfsvis[i]==1)return 1;
    }
    dfsvis[node]=0;
    return 0;
}
int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
  // Write your code here.
    unordered_map<int,set<int>>adj;
    vector<int>vis(n+1,0);
    vector<int>dfsvis(n+1,0);
    prepare(edges,adj,n);

    for(int i = 1 ; i<=n ; i++){
        if(!vis[i]){
            if(check(i,adj,vis,dfsvis))return 1;
        }
    }
    return 0;
}
