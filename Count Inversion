
long long merge(long long arr[], int l , int mid, int h){
    int i = l , j = mid, count = 0 , s = 0 ; 
    long long temp[h-l+1];
    while(i<mid || j<=h){
        if(i<mid && j<=h){
            if(arr[i]>arr[j]){
                count += (mid-i);
                temp[s++] = arr[j++];
                
            }
            else{
                temp[s++] = arr[i++];
            }
        }
        else if(i<mid)temp[s++] = arr[i++];
        else temp[s++] = arr[j++];
    }
    s= 0 ;
    for(int i = l ; i<= h ; i++)arr[i]=temp[s++];
    return count;
}

long long find(long long arr[] , int l , int h ){
    long long count = 0 ; 
    if(l<h){
        int mid = l + (h-l)/2;
        count = find(arr,l,mid);
        count += find(arr,mid+1,h);
        count +=merge(arr,l,mid+1,h);
    }
    return count;
}

long long getInversions(long long *arr, int n){
    // Write your code here.
    return find(arr,0,n-1);
}
