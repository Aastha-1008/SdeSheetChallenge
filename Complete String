struct Node{
    Node* links[26];
    bool flag = false;
    
    bool contain(char c){
        return links[c-'a']!=NULL;
    }
    Node* get(char c){
        return links[c-'a'];
    }
    void put(char c,Node* node){
        links[c-'a'] = node;
    }
    void setend(){
        flag = true;
    }
    bool isend(){
        return flag;
    }
};
class Trie {
    private:
    Node* root;
    public:
    Trie(){
        root = new Node();
    }
    void insert(string word){
        Node* node = root;
        for(int i = 0 ; i<word.length() ; i++){
            if(!node->contain(word[i]))node->put(word[i],new Node());
            node = node->get(word[i]);
        }
        node->setend();
    }
    bool check(string word){
        bool f = true;
        Node* node = root;
        for(int i = 0 ; i<word.length() ; i++){
            if(node->contain(word[i])){
                node = node->get(word[i]);
                if(node->isend()==false)return false;
            }
            else return false;
        }
        return true;
    }
};
string completeString(int n, vector<string> &a){
    // Write your code here.
    Trie obj;
    for(int i = 0 ; i<n ; i++)obj.insert(a[i]);
    string longest = "";
    for(auto &it : a){
        if(obj.check(it))
            if(it.length()  > longest.length())longest = it;
        else if(it.length()==longest.length() && it<longest)longest = it;
    }
    if(longest.length()==0)return "None";
    return longest;
}
