struct Node{
    Node* links[26];
    int cntendwith = 0;
    int cntprefix = 0;
    
    bool containKey(char c){
        return links[c-'a']!=NULL;
    }
    Node* get(char c){
        return links[c-'a'];
    }
    void put(char c , Node* node){
        links[c-'a'] = node;
    }
    void increaseEnd(){
        cntendwith++;
    }
    void increasePrefix(){
        cntprefix++;
    }
    void deleteEnd(){
        cntendwith--;
    }
    void reduceprefix(){
        cntprefix--;
    }
    int getEnd(){
        return cntendwith;
    }
    int getPrefix(){
        return cntprefix;
    }
    
};
class Trie{
    private:
        Node* root;
    public:

    Trie(){
        // Write your code here.
        root = new Node();
    }

    void insert(string &word){
        // Write your code here.
        Node* node = root;
        for(int i = 0 ; i<word.length() ; i++){
            if(!node->containKey(word[i]))node->put(word[i],new Node());
            node = node->get(word[i]);
            node->increasePrefix();
        }
        node->increaseEnd();
    }

    int countWordsEqualTo(string &word){
        // Write your code here.
        Node* node = root;
        for(int i = 0 ; i<word.length() ; i++){
            if(node->containKey(word[i]))node = node->get(word[i]);
            else return 0;
        }
        return node->getEnd();
    }

    int countWordsStartingWith(string &word){
        // Write your code here.
         Node* node = root;
        for(int i = 0 ; i<word.length() ; i++){
            if(node->containKey(word[i]))node = node->get(word[i]);
            else return 0;
        }
        return node->getPrefix();
    }

    void erase(string &word){
        // Write your code here.
        Node* node = root;
        for(int i = 0 ; i<word.length() ; i++){
            if(node->containKey(word[i])){
                node = node->get(word[i]);
                node->reduceprefix();
            }
            else{
                return;
            }
        }
        node->deleteEnd();
    }
};
