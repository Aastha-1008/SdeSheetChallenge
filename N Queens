vector<vector<int>>ans;

bool check(vector<vector<int>>&vec , int n , int row , int col ){
    int duprow = row ;
    int dupcol = col ;
    while(duprow>=0 && dupcol>=0){
        if(vec[duprow][dupcol]==1)return false;
        duprow--;
        dupcol--;
    }
    duprow = row ;
    dupcol = col;
    while(dupcol>=0){
        if(vec[duprow][dupcol]==1)return false;
        dupcol--;
    }
    duprow = row;
    dupcol = col;
    while(duprow<n && dupcol>=0){
        if(vec[duprow][dupcol]==1)return false;
        duprow++;
        dupcol--;
    }
    return true;
}

void solve(int col , vector<vector<int>>&vec , int n){
    if(col==n){
        vector<int>v;
        for(int i = 0 ; i< n ; i++){
            for(int j = 0 ; j<n ; j++){
                v.push_back(vec[i][j]);
            }
        }
        ans.push_back(v);
    }
    for(int row = 0 ; row<n ; row++){
        if(check(vec,n,row,col)){
            vec[row][col] = 1;
            solve(col+1,vec,n);
            vec[row][col] = 0;
        }
    }
}

vector<vector<int>> solveNQueens(int n) {
    // Write your code here.
    ans.clear();
    vector<vector<int>>vec(n,vector<int>(n,0));
    solve(0,vec,n);
    return ans;
}
