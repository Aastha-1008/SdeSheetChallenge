
#include<bits/stdc++.h>
struct Node{
    Node* link[2];
    bool contain(int num ){return link[num]!=NULL;}
    void put(int num , Node* node){link[num] = node;}
    Node* get(int num){return link[num];}
};
class Trie{
    private:
        Node* root;
    public:
        Trie(){
            root= new Node();
        }
        void insert(int num){
            Node* node = root;
            for(int i = 31; i>=0 ; i--){
                int bit = (num>>i) & 1;
                if(!node->contain(bit))node->put(bit,new Node());
                node = node->get(bit);
            }
        }
    public: 
        int findmax(int num){
            Node* node = root ;
            int maxNum = 0;
            for(int i = 31 ; i>=0 ; i--){
                int bit = (num>>i)&1;
                if(node->contain(!bit)){
                    maxNum = maxNum | (1<<i);
                    node = node->get(!bit);
                }
                else{
                    node = node->get(bit);
                }
            }
            return maxNum;
        }
};
vector<int> maxXorQueries(vector<int> &arr, vector<vector<int>> &queries){
    sort(arr.begin(),arr.end());
    vector< pair< int,pair<int,int> > >qo;
    int q = queries.size();
    for(int i = 0 ; i<q ; i++){
        qo.push_back(make_pair(queries[i][1],make_pair(queries[i][0],i)));
    }
    sort(qo.begin(),qo.end());
    vector<int>ans(q,0);
    int ind = 0 ;
    int n = arr.size();
    Trie trie;
    for(int i = 0 ; i<q ; i++){
        int ai = qo[i].first;
        int xi = qo[i].second.first;
        int qind = qo[i].second.second;
        while(ind<n && arr[ind]<=ai){
            trie.insert(arr[ind]);
            ind++;
        }
        if(ind == 0 )ans[qind] = -1;
        else ans[qind]= trie.findmax(xi);
    }
    return ans;
};
