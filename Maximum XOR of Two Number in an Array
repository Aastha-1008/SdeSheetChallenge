struct Node{
    Node* link[2];
    
    bool contain(int val){return link[val]!=NULL;}
    
    Node* get(int val){return link[val];}
    
    void put(int val , Node* node){ link[val] = node;}
};
class Trie{
    private:
        Node* root;
    public:
        Trie(){
            root = new Node();
        }
        
        void insert(int num){
            Node* node = root;
            for(int i = 31 ; i>=0 ; i--){
                int bit = (num>>i)& 1;
                if(!node->contain(bit))node->put(bit, new Node());
                node = node->get(bit);
            }
        }
        int getMax(int num){
            Node* node = root;
            int maxnum = 0;
            for(int i = 31 ; i>=0 ; i--){
                int bit = (num>>i)& 1;
                if(node->contain(1-bit)){
                    maxnum = maxnum | (1<<i);
                    node = node->get(1-bit);
                }
                else node = node->get(bit);
            }
            return maxnum;
        }
};
int maximumXor(vector<int> A)
{
    // Write your code here.  
    int n = A.size();
    Trie obj;
    for(int i = 0 ; i<n ; i++){
        obj.insert(A[i]);
    }
    int maxi = 0;
    for(auto &i : A){
        maxi = max(maxi , obj.getMax(i));
    }
    return maxi;
}
