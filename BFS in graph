#include<unordered_map>
#include<set>
#include<queue>
void makeadjlist(vector<pair<int,int>>& edges , unordered_map<int,set<int>>& adj){
    for(int i = 0 ; i<edges.size() ; i++){
        int u = edges[i].first;
        int v = edges[i].second;
        adj[u].insert(v);
        adj[v].insert(u);
    }
}

void bfs(unordered_map<int,set<int> > &adj ,     unordered_map<int,bool>& visited,    vector<int>& ans , int node ){
    queue<int>q;
    q.push(node);
    visited[node]=true;
    while(!q.empty()){
        int value = q.front();
        q.pop();
        ans.push_back(value);
        for(auto i:adj[value]){
            if(!visited[i]){q.push(i);visited[i]=true;}
        }
    }
}

vector<int> BFS(int vertex, vector<pair<int, int>> edges)
{
    // Write your code here
    unordered_map<int,set<int> > adj;
    vector<int>ans;
    unordered_map<int,bool>visited;
    
    makeadjlist(edges,adj);
    
    for(int i = 0 ; i<vertex ; i++){
        if(!visited[i]){
            bfs(adj,visited,ans,i);
        }
    }
    return ans;
}
