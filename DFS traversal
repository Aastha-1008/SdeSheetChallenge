#include<unordered_map>
#include<set>
#include<vector>

void preparedadjlist(unordered_map<int,set<int>> &adj,vector<vector<int>>& edges){
    for(int i = 0 ; i<edges.size() ; i++){
        int u = edges[i][0];
        int v = edges[i][1];
        adj[u].insert(v);
        adj[v].insert(u);
    }
}

void dfs(unordered_map<int, set<int> > &adj , int node , vector<bool> &visited,vector<int>&v){
    visited[node] = true;
    for(auto i : adj[node]){
        if(!visited[i]){
            visited[i] = true;
            v.push_back(i);
            dfs(adj,i,visited,v);
        }
    }
}
void print(unordered_map<int, set<int> > adj){
    for(auto i: adj){
        cout<<i.first<<"->";
        for(auto j : i.second){
            cout<<j<<" ";
        }
        cout<<endl;
    }
}
vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)
{
    // Write your code here
    unordered_map < int,set<int> > adj ;
    vector<vector<int>>ans;
    vector<bool>visited(V);
    // Making Adj list
    preparedadjlist(adj,edges);
    // print(adj);
        // Traversing
    for(int i = 0 ; i<V ; i++){
        if(!visited[i]){
            vector<int>v;
            v.push_back(i);
            dfs(adj , i,visited,v);
            sort(v.begin(),v.end());
            ans.push_back(v);
        }
    }
    return ans;
}
