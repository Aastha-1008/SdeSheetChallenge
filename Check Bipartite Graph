#include<unordered_map>
#include<set>
#include<queue>

bool bfs(unordered_map<int,set<int>>&adj,int node , vector<int>& color){
    queue<int>q;
    q.push(node);
    color[node]=0;
    while(!q.empty()){
        int ele = q.front();
        q.pop();
        for(auto it : adj[ele]){
            if(color[it]==-1){
                color[it] = 1-color[ele];
                q.push(it);
            }
            else{
                if(color[it]==color[ele])return false;
            }
        }
    }
    return true;
}

bool isGraphBirpatite(vector<vector<int>> &edges) {
	// Write your code here.
    unordered_map<int,set<int>>adj;
    for(int i = 0 ; i<edges.size() ; i++){
        for(int j = 0 ; j<edges[0].size() ; j++){
            if(edges[i][j] == 1){
                adj[i].insert(j); 
            }
        }
    }
    if(adj.size()==0)return true;
    int n = edges[0].size();
    vector<int>color(n,-1);
    for(int i = 0 ; i< n ; i++){
        if(color[i]==-1){
            if(!bfs(adj,i,color))return false;
        }
    }
    return true;
}
