#include<bits/stdc++.h>
bool comp(vector<int>&a , vector<int>&b){
    return a[2]<b[2];
}
int findpar(int u , vector<int>&par){
    if(u==par[u])return u;
    return par[u]=findpar(par[u],par);
}
void unionv(int u , int v , vector<int>&rank){
    if(u<0 && v<0 && u>rank.size() && v>rank.size())return;
    rank[u]=v;
}

int kruskalMST(int n, int m, vector<vector<int>> &graph) {
	// Write your code here.
    sort(graph.begin(),graph.end(),comp);
    vector<int>rank(n+1);
    for(int i = 0 ; i<n+1 ; i++){
        rank[i] = i;
    }
    int cost = 0 ;
    for(auto i: graph){
        int u = findpar(i[0],rank);
        int v = findpar(i[1],rank);
        if(u!= v){
            cost += i[2];
            unionv(u,v,rank);
        }
    }
    return cost;
}
