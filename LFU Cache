#include<bits/stdc++.h>
struct Node{
    int key , value , cnt;
    Node* next ; 
    Node* prev ;
    Node(int k , int v){
        key = k ;
        value = v;
        cnt = 1;
    }
};
struct List{
    int size;
    Node* head;
    Node* tail;
    List(){
        head = new Node(0,0);
        tail = new Node(0,0);
        head->next = tail;
        tail->prev = head;
        size = 0 ;
    }
    void add(Node* node){
        Node* temp = head->next;
        node->next = temp;
        node->prev = head;
        head->next = node;
        temp->prev = node;
        size++;
    }
    void remove(Node* node){
        Node* temp = node->prev;
        temp->next = node->next;
        node->next->prev = temp;
        size--;
    }
};

class LFUCache
{
    map<int,Node*>keymap;
    map<int,List*>freqmap;
    int minfreq;
    int maxfreq;
    int currsize;
public:
    LFUCache(int capacity)
    {
        // Write your code here.
        minfreq = 0;
        maxfreq = capacity;
        currsize = 0;
    }
    void update(Node* node){
        keymap.erase(node->key);
        freqmap[node->cnt]->remove(node);
        if(node->cnt == minfreq && freqmap[node->cnt]->size == 0){
             minfreq++;
        }
        List* nexthigher = new List();
        if(freqmap.find(node->cnt +1) != freqmap.end()){
            nexthigher = freqmap[node->cnt  + 1];
        }
        node->cnt++;
        nexthigher->add(node);
        freqmap[node->cnt] = nexthigher;
        keymap[node->key] = node;
    }
    int get(int key)
    {
        // Write your code here.
        if(keymap.find(key) != keymap.end()){
            Node* node = keymap[key];
            int val = node->value;
            update(node);
            return val;
        }
        return -1;
    }

    void put(int key, int value)
    {
        // Write your code here.
        if(maxfreq == 0)return;
        if(keymap.find(key) != keymap.end()){
            Node* node = keymap[key];
            node->value = value;
            update(node);
        }
        else{
            if(currsize== maxfreq){
                List* list = freqmap[minfreq];
                keymap.erase(list->tail->prev->key);
                freqmap[minfreq]->remove(list->tail->prev);
                currsize--;
            }
            currsize++;
            minfreq = 1;
            List* list = new List();
            if(freqmap.find(minfreq) != freqmap.end()){
                list = freqmap[minfreq];
            }
            Node* node = new Node(key,value);
            list->add(node);
            keymap[key] = node;
            freqmap[minfreq] = list;
        }
        
    }
};
